generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                String             @id @default(cuid())
  name              String
  lastName          String?
  email             String             @unique
  emailVerified     DateTime?
  createdAt         DateTime           @default(now())
  image             String?
  reviews           Review[]
  shippingAddresses ShippingAddress[]
  shoppingCartItem  ShoppingCartItem[]
  accounts          Account[]
  sessions          Session[]
}

model ShippingAddress {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String
  country     String
  state       String
  city        String
  address     String
  zip         String
  phoneNumber Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  User        User     @relation(fields: [userId], references: [id])
}

model Product {
  id                String             @id @default(cuid())
  name              String
  price             Float
  stock             Int
  description       String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  imageURL          String?
  averageRating     Float              @default(0)
  vendorId          String
  categories        Category[]
  vendor            Vendor             @relation(fields: [vendorId], references: [id])
  reviews           Review[]
  shoppingCartItems ShoppingCartItem[]
}

model ShoppingCartItem {
  id        String  @id @default(cuid())
  productId String
  quantity  Int
  userId    String
  product   Product @relation(fields: [productId], references: [id])
  user      User    @relation(fields: [userId], references: [id])
}

model Category {
  id          String    @id @unique @default(cuid())
  name        String
  description String?
  products    Product[]
}

model Vendor {
  id          String    @id @default(cuid())
  name        String    @unique
  description String
  createdAt   DateTime  @default(now())
  imageURL    String?
  products    Product[]
}

model Review {
  id          String   @id @default(cuid())
  title       String
  rating      Int
  body        String
  upvoteCount Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  productId   String
  reviewedBy  User     @relation(fields: [userId], references: [id])
  reviewed    Product  @relation(fields: [productId], references: [id])
}

model CategoryToProduct {
  A String
  B String

  @@unique([A, B], map: "_CategoryToProduct_AB_unique")
  @@index([B], map: "_CategoryToProduct_B_index")
  @@map("_CategoryToProduct")
}
