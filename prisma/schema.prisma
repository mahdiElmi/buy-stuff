generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  // relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  // @@index([userId])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                String             @id @default(cuid())
  name              String
  firstName         String?
  lastName          String?
  email             String             @unique
  emailVerified     DateTime?
  createdAt         DateTime           @default(now())
  image             String             @default("http://www.gravatar.com/avatar/?d=mp") @db.VarChar(2048)
  reviews           Review[]
  reviewVotes       Vote[]
  shippingAddresses ShippingAddress[]
  shoppingCartItems ShoppingCartItem[]
  accounts          Account[]
  sessions          Session[]
  vendor            Vendor?
  favorites         Product[]
  lists             List[]
}

model List {
  id          String    @id @default(cuid())
  title       String
  description String?
  products    Product[]
  authorId    String
  author      User      @relation(fields: [authorId], references: [id])

  // @@index([authorId])
}

model Vote {
  // id       String  @id @default(cuid())
  isVoteUp Boolean
  user     User    @relation(fields: [userId], references: [id])
  review   Review  @relation(fields: [reviewId], references: [id])
  userId   String
  reviewId String
  // @@index([userId])
  // @@index([reviewId])

  @@id([userId, reviewId])
}

model Vendor {
  id          String    @id @default(cuid())
  name        String    @unique
  description String    @db.Text
  imageURL    String?   @db.VarChar(2048)
  bannerImage String?   @db.VarChar(2048)
  createdAt   DateTime  @default(now())
  products    Product[]
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @unique
}

model ShippingAddress {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String
  country     String
  state       String
  city        String
  address     String
  zip         String
  phoneNumber Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  User        User     @relation(fields: [userId], references: [id])

  // @@index([userId])
}

model Product {
  id                 String             @id @default(cuid())
  name               String
  price              Float
  discountPercentage Int                @default(0)
  stock              Int
  description        String             @db.Text
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  images             Image[]
  averageRating      Float              @default(0)
  vendorId           String
  categories         Category[]
  vendor             Vendor             @relation(fields: [vendorId], references: [id])
  reviews            Review[]
  shoppingCartItems  ShoppingCartItem[]
  favoritedBy        User[]
  listAssociations   List[]

  // @@index([vendorId])
}

model Image {
  id        String   @id @default(cuid())
  width     Int?
  height    Int?
  url       String   @db.VarChar(2048)
  Product   Product? @relation(fields: [productId], references: [id])
  productId String?

  // @@index([productId])
}

model ShoppingCartItem {
  id        String  @id @default(cuid())
  productId String
  quantity  Int
  userId    String
  product   Product @relation(fields: [productId], references: [id])
  user      User    @relation(fields: [userId], references: [id])
  // @@index([productId])
  // @@index([userId])

  @@unique([productId, userId])
}

model Category {
  id          String    @id @unique @default(cuid())
  name        String    @unique
  description String?   @db.Text
  products    Product[]
}

model Review {
  id          String   @id @default(cuid())
  title       String
  rating      Int
  body        String   @db.Text
  upvoteCount Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  productId   String
  reviewedBy  User     @relation(fields: [userId], references: [id])
  reviewed    Product  @relation(fields: [productId], references: [id])
  Vote        Vote[]

  // @@index([userId])
  // @@index([productId])
}

model CategoryToProduct {
  A String
  B String

  @@unique([A, B], map: "_CategoryToProduct_AB_unique")
  // @@index([B], map: "_CategoryToProduct_B_index")
  @@map("_CategoryToProduct")
}
